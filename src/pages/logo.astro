---

---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Kohei Harada</title>
  </head>
  <body>
    <div id="container"></div>
  </body>
</html>
<style is:global>
  * {
    margin: 0;
    padding: 0;
  }
  body {
    filter: blur(0.45px) contrast(100);
  }
  .tempcanvas {
    position: fixed;
    z-index: 9999;
    top: 0;
    left: 0;
    background: red;
    display: none;
  }
</style>
<script>
  import * as THREE from "three";
  import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
  import gsap from "gsap";

  let size = 400;
  let canvas = document.createElement("canvas");
  let ctx = canvas.getContext("2d");
  canvas.width = size;
  canvas.height = size;
  canvas.classList.add("tempcanvas");
  document.body.appendChild(canvas);

  function fillUp(array, max) {
    let length = array.length;
    for (let i = 0; i < max - length; i++) {
      array.push(array[Math.floor(Math.random() * length)]);
    }
    return array;
  }

  function shuffle(a) {
    for (let i = a.length; i; i--) {
      let j = Math.floor(Math.random() * i);
      [a[i - 1], a[j]] = [a[j], a[i - 1]];
    }
    return a;
  }
  function loadImagesSequentially(paths, whenLoaded) {
    let imgs = [];

    async function loadImage(path) {
      return new Promise((resolve, reject) => {
        let img = new Image();
        img.onload = () => resolve(img);
        img.onerror = reject;
        img.src = path;
      });
    }

    async function loadAllImages() {
      for (const path of paths) {
        const img = await loadImage(path);
        imgs.push(img);
      }
      whenLoaded(imgs);
    }

    loadAllImages();
  }
  function hslToRgb(h, s, l) {
    s /= 100;
    l /= 100;

    let c = (1 - Math.abs(2 * l - 1)) * s;
    let x = c * (1 - Math.abs(((h / 60) % 2) - 1));
    let m = l - c / 2;
    let r = 0,
      g = 0,
      b = 0;

    if (0 <= h && h < 60) {
      r = c;
      g = x;
      b = 0;
    } else if (60 <= h && h < 120) {
      r = x;
      g = c;
      b = 0;
    } else if (120 <= h && h < 180) {
      r = 0;
      g = c;
      b = x;
    } else if (180 <= h && h < 240) {
      r = 0;
      g = x;
      b = c;
    } else if (240 <= h && h < 300) {
      r = x;
      g = 0;
      b = c;
    } else if (300 <= h && h < 360) {
      r = c;
      g = 0;
      b = x;
    }

    r = Math.round((r + m) * 255);
    g = Math.round((g + m) * 255);
    b = Math.round((b + m) * 255);

    return [r / 255, g / 255, b / 255];
  }

  function getArrayFromImage(img, sizeX, sizeY) {
    let imageCoords = [];
    ctx.clearRect(0, 0, size, size);
    ctx.drawImage(img, 0, 0, sizeX, sizeY);
    let data = ctx.getImageData(0, 0, sizeX, sizeY).data;

    for (let y = 0; y < size; y++) {
      for (let x = 0; x < size; x++) {
        let alpha = data[(size * y + x) * 4 + 3];
        if (alpha > 0) {
          imageCoords.push([10 * (x - size / 2), 10 * (size / 2 - y)]);
        }
      }
    }
    return shuffle(fillUp(imageCoords, 1500));
  }

  let images = ["../KH_logo.png", "../CF_logo.png"];
  loadImagesSequentially(images, function (loadedImages) {
    let gallery = [];
    gallery.push(getArrayFromImage(loadedImages[0], 400, 400));
    gallery.push(getArrayFromImage(loadedImages[1], 400, 400));

    let camera, controls, scene, renderer;
    let geometry, pointCloud;

    function init() {
      scene = new THREE.Scene();
      scene.background = new THREE.Color(0x000);

      renderer = new THREE.WebGLRenderer();
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(window.innerWidth, window.innerHeight);

      let container = document.getElementById("container");
      container.appendChild(renderer.domElement);

      camera = new THREE.PerspectiveCamera(
        90,
        window.innerWidth / window.innerHeight,
        1,
        5000
      );
      camera.position.z = 2800;

      controls = new OrbitControls(camera, renderer.domElement);

      let texture = new THREE.TextureLoader().load("../particle.png");
      let material = new THREE.PointsMaterial({
        size: 10,
        vertexColors: true,
        map: texture,
        alphaTest: 0.5,
      });

      geometry = new THREE.BufferGeometry();
      const vertices = [];
      const colors = [];
      let colorHue = Math.floor(Math.random() * 360);
      const lightMultiList = [40, 50, 70, 80, 100];
      const lightMulti =
        lightMultiList[Math.floor(lightMultiList.length * Math.random())];
      const saturateMultiList = [0, 40, 50, 70, 80, 100];
      const saturateMulti =
        saturateMultiList[Math.floor(saturateMultiList.length * Math.random())];

      gallery[0].forEach((el, index) => {
        const zPos = Math.random() * 300;
        vertices.push(el[0], el[1], zPos);
        const [r, g, b] = hslToRgb(colorHue, 0, (zPos / 300) * lightMulti); // Adjust lightness based on zPos
        colors.push(r, g, b);
      });

      geometry.setAttribute(
        "position",
        new THREE.Float32BufferAttribute(vertices, 3)
      );
      geometry.setAttribute(
        "color",
        new THREE.Float32BufferAttribute(colors, 3)
      );

      pointCloud = new THREE.Points(geometry, material);
      scene.add(pointCloud);
      console.log(geometry.attributes.position);

      window.addEventListener("resize", onWindowResize, false);
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }
    const clock = new THREE.Clock();
    let time = 0;

    function animate() {
      requestAnimationFrame(animate);
      time++;

      let positions = geometry.attributes.position.array;

      for (let i = 0; i < positions.length; i += 3) {
        let dX = 0;
        let dY = 0;
        let dZ = Math.sin(time / 10 + positions[i] / 0.5) * 2;

        positions[i] += dX;
        positions[i + 1] += dY;
        positions[i + 2] += dZ;
      }
      geometry.attributes.position.needsUpdate = true;
      render();
    }

    function render() {
      renderer.render(scene, camera);
    }

    init();
    animate();

    let current = 0;
    document.body.addEventListener("click", function () {
      current++;
      current = current % gallery.length;
      geometry.attributes.position.array.forEach((value, index) => {
        if (index % 3 === 0) {
          gsap.to(geometry.attributes.position.array, {
            duration: 1,
            [index]: gallery[current][index / 3][0],
            [index + 1]: gallery[current][index / 3][1],
          });
        }
      });
      geometry.attributes.position.needsUpdate = true;
    });
  });
</script>
