---
import "../styles/style.scss";
interface Props {
  title: string;
  descr: string;
  keywords: string;
}

const { title, descr, keywords } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
    <meta name="description" content={descr} />
    <meta name="keywords" content={keywords} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" sizes="70x70" href="/70x70.png" />
    <link rel="icon" type="image/png" sizes="150x150" href="/150x150.png" />
    <link rel="icon" type="image/png" sizes="180x180" href="/180x180.png" />
    <link rel="icon" type="image/png" sizes="310x310" href="/310x310.png" />
    <meta name="generator" content={Astro.generator} />
    <!-- <script
      src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"
      integrity="sha512-7eHRwcbYkK4d9g/6tD/mhkf++eoTHwpNM9woBxtPUBWm67zeAfFC+HrdoE2GanKeocly/VxeLvIqwvCdk7qScg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/ScrollTrigger.min.js"
      integrity="sha512-onMTRKJBKz8M1TnqqDuGBlowlH0ohFzMXYRNebz+yOcc5TQr/zAKsthzhuv0hiyUKEiQEQXEynnXCvNTOk50dg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/ScrollToPlugin.min.js"
      integrity="sha512-1PKqXBz2ju2JcAerHKL0ldg0PT/1vr3LghYAtc59+9xy8e19QEtaNUyt1gprouyWnpOPqNJjL4gXMRMEpHYyLQ=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"></script> -->
  </head>
  <body>
    <div id="transition-overlay">
      <div class="loader font-title text-white">
        <span>L</span>
        <span>o</span>
        <span>a</span>
        <span>d</span>
        <span>i</span>
        <span>n</span>
        <span>g</span>
      </div>
    </div>
    <div class="circle-cursor circle-cursor--inner"></div>
    <div class="circle-cursor circle-cursor--outer"></div>
    <slot />
  </body>
</html>
<style lang="scss" is:global>
  :root {
    --fontColor: #111;
    --fontSubColor: #fff;
  }
  @font-face {
    font-family: "Fenwick";
    src: url("/fonts/Fenwick.ttf") format("truetype");
  }
  @font-face {
    font-family: "Roboto";
    src: url("/fonts/Roboto-Regular.ttf") format("truetype");
  }
  @font-face {
    font-family: "Big Caslon";
    src:
      url("/fonts/BigCaslonFB-Regular.ttf") format("truetype"),
      src("/fonts/BigCaslonFB-Regular.woff"),
      src("/fonts/BigCaslonFB-Regular.woff2");
  }
  html {
    font-family: "Fenwick", sans-serif;
    font-size: 16px;
    cursor: none;
  }
  a {
    cursor: none;
  }
  .circle-cursor {
    position: fixed;
    left: 0;
    top: 0;
    pointer-events: none;
    border-radius: 50%;
    backdrop-filter: invert(1);
    // mix-blend-mode: difference;
    &--outer {
      width: 30px;
      height: 30px;
      border: 1px solid var(--fontColor);
      z-index: 12000;
      opacity: 1;
    }
    &--inner {
      width: 5px;
      height: 5px;
      left: -2.5px;
      top: -2.5px;
      z-index: 11000;
      background: var(--fontColor);
    }
  }
  .box {
    position: absolute;
    width: 100px;
    height: 100px;
    background-color: #707070;
    z-index: -10;
    width: 420px;
    height: 315px;
    border-radius: 200px;
    transform: rotate(-30deg);
    filter: blur(15px);
  }

  #box1 {
    bottom: 20px;
    left: 200px;
  }

  #box2 {
    top: 100px;
    right: 20px;
  }
  @media (max-width: 767.9px) {
    html {
      cursor: default;
    }
    a {
      cursor: pointer;
    }
    .circle-cursor {
      display: none;
    }
    .box {
      width: 330px;
      height: 248px;
    }
    #box1 {
      bottom: 20px;
      left: -80px;
    }

    #box2 {
      top: 55px;
      right: -60px;
    }
  }
  #transition-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #fff;
    z-index: 15000;
    pointer-events: none;
    transform: translateY(0%);
    transition: opacity 0.4s ease-in-out;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .loader {
    opacity: 0;
    font-size: 44px;
    color: #111;
    display: flex;
    column-gap: 1px;
  }
</style>
<script>
  import gsap from "gsap";
  const overlay = document.getElementById("transition-overlay");
  const loader = overlay.querySelector(".loader");
  gsap.set(".loader span", { yPercent: 200, opacity: 0 });
  gsap.set(".loader", { opacity: 1 });
  gsap.set(".overlay", { display: "flex" });
  const loaderTl = new gsap.timeline({ repeat: -1 });
  loaderTl
    .to(".loader span", 0.7, {
      yPercent: 0,
      opacity: 1,
      ease: "sine.inOut",
      stagger: { from: "center", amount: 0.5, ease: "power1.out" },
    })
    .to(".loader span", 0.7, {
      yPercent: -200,
      opacity: 0,
      ease: "sine.inOut",
      stagger: { from: "edges", amount: 0.5, ease: "power1.out" },
    });

  document.addEventListener("click", (event) => {
    const target = event.target;

    if (target.tagName === "A" && target.href) {
      const link = new URL(target.href, window.location.origin);
      const isInternalLink = link.origin === window.location.origin;

      if (isInternalLink) {
        event.preventDefault();

        overlay.style.display = "flex";
        overlay.style.opacity = "1";
        overlay.style.transform = "translateY(0%)";
        loader.style.display = "none";

        setTimeout(() => {
          setTimeout(() => {
            window.location.href = target.href;
          }, 400);
        }, 400);
      }
    }
  });

  window.addEventListener("load", () => {
    setTimeout(() => {
      overlay.style.opacity = "0";
    }, 1400);
    setTimeout(() => {}, 1400);
  });

  class customCursor {
    constructor() {
      this.initCursor();
      this.initHovers();
    }

    initCursor() {
      const { Back } = window;
      this.outerCursor = document.querySelector(".circle-cursor--outer");
      this.innerCursor = document.querySelector(".circle-cursor--inner");
      this.outerCursorBox = this.outerCursor.getBoundingClientRect();
      this.outerCursorSpeed = 0;
      this.easing = gsap.parseEase("back.out(1.7)");
      this.clientX = -100;
      this.clientY = -100;
      this.showCursor = false;

      const unveilCursor = () => {
        gsap.set(this.innerCursor, {
          x: this.clientX,
          y: this.clientY,
        });
        gsap.set(this.outerCursor, {
          x: this.clientX - this.outerCursorBox.width / 2,
          y: this.clientY - this.outerCursorBox.height / 2,
        });
        setTimeout(() => {
          this.outerCursorSpeed = 0.2;
        }, 100);
        this.showCursor = true;
      };
      document.addEventListener("mousemove", unveilCursor);

      document.addEventListener("mousemove", (e) => {
        this.clientX = e.clientX;
        this.clientY = e.clientY;
      });

      const render = () => {
        gsap.set(this.innerCursor, {
          x: this.clientX,
          y: this.clientY,
        });
        if (!this.isStuck) {
          gsap.to(this.outerCursor, this.outerCursorSpeed, {
            x: this.clientX - this.outerCursorBox.width / 2,
            y: this.clientY - this.outerCursorBox.height / 2,
          });
        }
        if (this.showCursor) {
          document.removeEventListener("mousemove", unveilCursor);
        }
        requestAnimationFrame(render);
      };
      requestAnimationFrame(render);
    }

    initHovers() {
      const handleMouseEnter = (e) => {
        this.isStuck = false;
        const target = e.currentTarget;
        const box = target.getBoundingClientRect();
        gsap.to(this.outerCursor, 0.2, {
          transformOrigin: "center center",
          scale: 2,
        });
      };

      const handleMouseLeave = () => {
        this.isStuck = false;
        gsap.to(this.outerCursor, 0.2, {
          transformOrigin: "center center",
          scale: 1,
        });
      };

      const linkItems = document.querySelectorAll("a");
      linkItems.forEach((item) => {
        item.addEventListener("mouseenter", handleMouseEnter);
        item.addEventListener("mouseleave", handleMouseLeave);
      });

      const mainNavHoverTween = gsap.to(this.outerCursor, 0.3, {
        backgroundColor: "#ffffff",
        ease: this.easing,
        paused: true,
      });

      const mainNavMouseEnter = () => {
        this.outerCursorSpeed = 0;
        gsap.set(this.innerCursor, { opacity: 0 });
        mainNavHoverTween.play();
      };

      const mainNavMouseLeave = () => {
        this.outerCursorSpeed = 0.2;
        gsap.set(this.innerCursor, { opacity: 1 });
        mainNavHoverTween.reverse();
      };

      const mainNavLinks = document.querySelectorAll(".content--fixed a");
      mainNavLinks.forEach((item) => {
        item.addEventListener("mouseenter", mainNavMouseEnter);
        item.addEventListener("mouseleave", mainNavMouseLeave);
      });
    }
  }
  const cursor = new customCursor();

  if (document.querySelector("#box1")) {
    const box1 = document.getElementById("box1");
    const box2 = document.getElementById("box2");
    gsap.set([box1, box2], { rotate: "-30deg" });

    const centerX = window.innerWidth / 2;
    const centerY = window.innerHeight / 2;
    const moveElementsToCenter = (event) => {
      const { clientX: mouseX, clientY: mouseY } = event;

      const distanceX1 = (centerX - mouseX) / 3;
      const distanceY1 = (centerY - mouseY) / 3;
      const distanceX2 = -(centerX - mouseX) / 2;
      const distanceY2 = -(centerY - mouseY) / 2;

      gsap.to(box1, {
        x: distanceX1,
        y: distanceY1,
        duration: 2.5,
        ease: "ease-in",
      });

      gsap.to(box2, {
        x: distanceX2,
        y: distanceY2,
        duration: 2.5,
        ease: "ease-in",
      });
    };
    document
      .querySelector(".main-sections__item--footer")
      .addEventListener("mousemove", moveElementsToCenter);
  }
</script>
